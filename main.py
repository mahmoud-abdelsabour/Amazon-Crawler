# -*- coding: utf-8 -*-
"""AmazonScraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QLCyoTXtAaG2QX_tNfjFdu5EegI97fKC
"""
import re
import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import os

"""# URL"""
variable = 5 # Commit test
URL_List = [
    'https://www.amazon.eg/-/en/Nescafe-Gold-Instant-Coffee-200g/dp/B00UELPID4/?_encoding=UTF8&pd_rd_w=FrrG9&content-id=amzn1.sym.60f9306d-5053-41bd-a7fb-0b96f394de1f&pf_rd_p=60f9306d-5053-41bd-a7fb-0b96f394de1f&pf_rd_r=J6KG6XKV3VT7E343G9HS&pd_rd_wg=Ww1wY&pd_rd_r=5d28aa96-c135-46d7-901a-3b1d7323be46&ref_=pd_hp_d_btf_ref_810de7a2-9ed2-4b50-bbbd-2346be099ee7',
    'https://www.amazon.eg/-/en/Apple-iPhone-11-FaceTime-SIM/dp/B08L8BJ9VC/ref=sr_1_5?crid=38XFI50TZ98P8&dib=eyJ2IjoiMSJ9.VPZ0fGt6S7GD1oLE7rC-3if4Zy0Y0KslFX5xzd-VH_tRd2D60JmniZWeh18pNs-Fv-l8zvaFWa9_IWm6Jrcuo_q8l6YN9jhVz3zqLzJ537KPBKzSBXBIIuFbFJZmP-pH_naCT1oGJ36zBW5MJm6GyZKEQKFqQuTi8Xt1RGuzINATy2Iih8ynrMjQwlOo2NLqtlL9PqI6V7M8iXB8Si4l_aAin697-yMWY_3VCkAuicn_glf6oVyTbjYtC0gVgpsFqy7wgFVAgz1v6wHntl4vlDwEjS0_Om-f-bgXjrAyCXs.FI7U5W6VjPGX5TOo0xUsWKvl1RohVaf-ri2vcFP4IkU&dib_tag=se&keywords=iphone+11+pro+max&qid=1716057388&sprefix=iphone+11+pro+%2Caps%2C195&sr=8-5',
    'https://www.amazon.eg/-/en/Delonghi-ec221-espresso-coffee-machine/dp/B003YC1EB0/ref=sr_1_12?crid=6LWPBJBFI8EM&dib=eyJ2IjoiMSJ9.qxw7vQOK3MSSjmb2Dp2faqa4xFXVOO6V1iz2m9fArlCbMOhs0fWSFYnYnC5O_1HjJcBc3JeycZyHGeEGmCY7FCe9WKEPM3SXmvbvR6tEmZQR42RQRqBiA67YV0xTVp9iYAh4tMLsqyWgA_MPcXDTU4osgSF6BTIoqcxaF7Jifxdt1chbvOIXUhgTk0DMWjW_jZrXX5-LZX2u_MlWk08vxJa7JXJ_XWCJcFUSmWNrbrQr0ubu33vTYm88FLIoBCMWHoTSTNe0Gn6fjaOyAX5p2TMHQrrMmqhR7jFMUKcXklo.6Qcqt1aY3SxXqY35172YXgonbc7vnTGE8xIIXnOdnHc&dib_tag=se&keywords=coffee+machine&qid=1716071733&sprefix=coffe%2Caps%2C211&sr=8-12',
    'https://www.amazon.eg/-/en/Apple-Smartwatch-Aluminum-Fitness-Detection/dp/B0CHX3TW41/ref=sr_1_2?crid=NO89TNC0YJF5&dib=eyJ2IjoiMSJ9.rTav3906WRLqbtKGD4tITUZYZHrwbRkgRbMKKQ8mB0fByIP-wLVlb64J4bWnChLY_cDkaPT_di351Ev1PX0sQ4g_ENmc_TA2RWhYUN-fmdncfiJsXqgUvd7y3gxHcSt-XGOiInygmfPuTKGigCJmi6kWrzxhU_lTTGDuj1redxshzvh3VDSgMbnCG2FsZWnnbD1O0VaDeX0TfOIeizyFIeOAI6tIGh3-_sqEuHDizoJAmt01oJzoc3WuQgV_b49AW9iqYulD_jyyod_cvnumoSywiQ25godPzPpPYRWF3Ls.8OnW49Wi1oPs_BIHlp9cX5BNrTIuTjuPKDw4bmqeYhY&dib_tag=se&keywords=apple+watch&qid=1716064768&sprefix=app%2Caps%2C246&sr=8-2',
    'https://www.amazon.eg/-/en/Boss-Bottled-Hugo-Men-Toilette/dp/B07V29N9KH?ref_=Oct_d_orecs_d_27917717031_1&pd_rd_w=jrMEI&content-id=amzn1.sym.1c2089fa-785f-4c11-982d-29cd23f544c4&pf_rd_p=1c2089fa-785f-4c11-982d-29cd23f544c4&pf_rd_r=52QZ4ACHHH7V9XF70NR3&pd_rd_wg=Nwa4s&pd_rd_r=38631635-cadf-4131-b14b-8b4a4acdc8d2&pd_rd_i=B07V29N9KH',

    'https://www.amazon.eg/-/en/Double-Walled-Coffee-Espresso-Resistant/dp/B0BZVR6725?ref_=Oct_DLandingS_D_47f02bd4_20',
    'https://www.amazon.eg/-/en/Dettol-Breeze-Antibacterial-Disinfectant-2-Pieces/dp/B0C2KDKJLR?ref_=Oct_DLandingS_D_960ee647_5',
    'https://www.amazon.eg/-/en/BenQ-Monitor-1920x1080-Display-GW2780/dp/B073NTCT4R?ref_=Oct_d_Oct_d_ss_d_21832909031_0&pd_rd_w=qXBOF&content-id=amzn1.sym.1c826919-7f9b-425c-8b14-6c286ae21646&pf_rd_p=1c826919-7f9b-425c-8b14-6c286ae21646&pf_rd_r=VET1ZQD4J4MSQ6CPBRFK&pd_rd_wg=7ORvP&pd_rd_r=b137f597-d40b-436a-b8a0-4a24f08d5ee9&pd_rd_i=B073NTCT4R',
    'https://www.amazon.eg/-/en/Angelet-Angel-Xts-690_61-Black/dp/B09KPXQ8H1?ref_=Oct_d_omwf_d_21973669031_0&pd_rd_w=khhYx&content-id=amzn1.sym.4f9b0b0d-9eb7-4ada-a2f6-148276ba4992&pf_rd_p=4f9b0b0d-9eb7-4ada-a2f6-148276ba4992&pf_rd_r=MFP92MA6H6ZWXEKG02P4&pd_rd_wg=JQ349&pd_rd_r=9790fea6-4f33-4663-9a7b-456e5e6e56ff&pd_rd_i=B09KPXQ8H1',
    'https://www.amazon.eg/-/en/Juhayna-pure-mango-peach-juice/dp/B0119FYV2C?ref_=Oct_d_orecs_d_21840373031_0&pd_rd_w=UeQtx&content-id=amzn1.sym.1c2089fa-785f-4c11-982d-29cd23f544c4&pf_rd_p=1c2089fa-785f-4c11-982d-29cd23f544c4&pf_rd_r=19RTV2CDAPSXJB0Z505D&pd_rd_wg=thJlq&pd_rd_r=0fe129ac-9c36-4142-92ff-1b08aa283158&pd_rd_i=B0119FYV2C'

]

"""# Header"""

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept-Encoding': 'gzip, deflate, br',
    'Referer': 'https://www.google.com/',
    'Connection': 'keep-alive',
}

"""# Data Lists"""

Name = []
Price = []
customerRating = []
category = []
salesRank = []
brand = []
images = []

"""# Retrieving Data """

for url in URL_List:
  r = requests.get(url , headers=headers)
  soup = BeautifulSoup(r.text , 'html.parser')
  Name.append(soup.find('span',{'id':"productTitle"}).text)
  Price.append(soup.find('span',{'class':"a-price-whole"}).text)
  customerRating.append(soup.find('span',{'id':"acrCustomerReviewText"}).text)
  category.append(soup.find('span',{'class':"nav-a-content"}).text)
  brand.append(soup.find('a',{'id':"bylineInfo"}).text)
  th_element = soup.find('th', class_='a-color-secondary a-size-base prodDetSectionEntry', text=' Best Sellers Rank ')
  td_element = th_element.find_next_sibling('td')
  salesRank.append(td_element.find('span').find('span').text.strip())
  img = soup.find('img', {'class': "a-dynamic-image"})
  images.append(img['src'])
  time.sleep(2)


"""# Data Cleaning and Preprocessing """

for i in range(len(Price)):
    Price[i] = float(Price[i].replace(',', ''))

for i in range(len(salesRank)):
    rank = salesRank[i]
    match = re.search(r'#([\d,]+) in', rank)
    salesRank[i] = match.group(1)
    salesRank[i] = float(salesRank[i].replace(',', ''))


for i in range(len(customerRating)): #Rating
    customerRating[i] = customerRating[i].replace(" ratings","")
    customerRating[i] = float(customerRating[i].replace(',', ''))


for i in range(len(brand)): #Brand
    brand[i] = brand[i].replace("Brand: ","")

for i in range(len(category)): #Category
    category[i] = category[i].replace('\n','')



category = [cat.strip() for cat in category]
Name = [NM.strip() for NM in Name]


# Saving the images

folder = r'D:\MSA\Spring 24\CS 313x - Data Storage and Information Retrieval\Project\AmazonScraper'
save_directory = os.path.join(folder, 'Scrapped Images')
os.makedirs(save_directory, exist_ok=True)

for i ,url in enumerate(images):
    r = requests.get(url,headers=headers)
    ext = os.path.splitext(url)[-1]
    name = brand[i]
    filename =  f'{name}_{i}{ext}'
    filepath = os.path.join(save_directory, filename)
    with open(filepath, 'wb') as f:
        f.write(r.content)
    time.sleep(2)


"""# Creating Data Frame and Saving to Excel Sheet"""

df = pd.DataFrame({'Name': Name,
                   'Price': Price,
                   'Category': category,
                   'Brand': brand,
                   'Rank': salesRank,
                   'Rating': customerRating,

                 })



pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)

print(df)
print(f'Name: {Name}')
print(f'Price: {Price}')
print(f'Category: {category}')
print(f'Rank: {salesRank}')
print(f'brand: {brand}')
print(f'Rating: {customerRating}')
print(images)

df.to_excel('AmazonDataset.xlsx')